<?xml version="1.0" encoding="utf-8"?>
<search>
  <entry>
    <title>Spring 中的Filter，Interceptor，Aop</title>
    <url>/2020/02/13/Filter-and-Interceptor-and-Aop-in-Spring/</url>
    <content><![CDATA[<p>开发过程中，经常需要在请求之前统一的做一些校验和记录，Spring为我们提供了Filter，Interceptor，Aop的方式，那么选哪种合适尼？<br>下面我们对这几种方式进行一下了解和对比。</p>
<a id="more"></a>

<h2 id="Filter-过滤器"><a href="#Filter-过滤器" class="headerlink" title="Filter 过滤器"></a>Filter 过滤器</h2><p>Filter是servlet规范中定义的java web组件, 基于函数回调,在所有支持java web的容器中都可以使用。<br>与框架无关，可以控制最初的http请求，不适合细粒度的控制。</p>
<p>Filter是一种责任链的模式，下面看看主要定义：</p>
<figure class="highlight plain"><table><tr><td class="code"><pre><span class="line">public interface Filter &#123;</span><br><span class="line"></span><br><span class="line">    	&#x2F;&#x2F;容器创建时调用，初始化filter，启动tomcat时调用</span><br><span class="line">	public void init(FilterConfig filterConfig) throws ServletException;</span><br><span class="line">	</span><br><span class="line">	&#x2F;&#x2F;进行过滤的具体实现， chain.doFilter前后执行</span><br><span class="line">    public void doFilter ( ServletRequest request, ServletResponse response, FilterChain chain ) throws IOException, ServletException;</span><br><span class="line"></span><br><span class="line">    &#x2F;&#x2F;容器销毁时调用来释放资源</span><br><span class="line">    public void destroy();</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>
<p>FilterChain：</p>
<figure class="highlight plain"><table><tr><td class="code"><pre><span class="line">public interface FilterChain &#123;</span><br><span class="line">	&#x2F;&#x2F;责任链执行Filter</span><br><span class="line">    public void doFilter ( ServletRequest request, ServletResponse response ) throws IOException, ServletException;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>
<p>调用过程大概如下：<br><img src="/2020/02/13/Filter-and-Interceptor-and-Aop-in-Spring/FilterChain.png" alt="FilterChain"><br>filter按顺序执行chain.doFilter 之前的逻辑，然后逆序执行之后的逻辑，像一个链子一样。<br>从参数上看可以对request和response进行操作。</p>
<h2 id="Interceptor-拦截器"><a href="#Interceptor-拦截器" class="headerlink" title="Interceptor 拦截器"></a>Interceptor 拦截器</h2><p>Interceptor 是Spring提供的组件。<br>Interceptor 功能实现主要是在Spring MVC的DispatcherServelt.doDispatch 方法中。<br>从代码看看他的原理：</p>
<figure class="highlight plain"><table><tr><td class="code"><pre><span class="line">public interface HandlerInterceptor &#123;</span><br><span class="line">      &#x2F;&#x2F;前置方法</span><br><span class="line">    default boolean preHandle(HttpServletRequest request, HttpServletResponse response, Object handler) throws Exception &#123;</span><br><span class="line">        return true;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">     &#x2F;&#x2F;调用真正请求后调用</span><br><span class="line">    default void postHandle(HttpServletRequest request, HttpServletResponse response, Object handler, @Nullable ModelAndView modelAndView) throws Exception &#123;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">     &#x2F;&#x2F;完成调用或者出错时会调用</span><br><span class="line">    default void afterCompletion(HttpServletRequest request, HttpServletResponse response, Object handler, @Nullable Exception ex) throws Exception &#123;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>
<p>使用</p>
<figure class="highlight plain"><table><tr><td class="code"><pre><span class="line">protected void doDispatch(HttpServletRequest request, HttpServletResponse response) throws Exception &#123;</span><br><span class="line">      ...</span><br><span class="line"></span><br><span class="line">        try &#123;</span><br><span class="line">            try &#123;</span><br><span class="line">                ...</span><br><span class="line">                try &#123;</span><br><span class="line">                    ...</span><br><span class="line">                    &#x2F;&#x2F;拦截器的前置处理方法</span><br><span class="line">                    if (!mappedHandler.applyPreHandle(processedRequest, response)) &#123;</span><br><span class="line">                        return;</span><br><span class="line">                    &#125;</span><br><span class="line">                    </span><br><span class="line">                    &#x2F;&#x2F;请求处理方法</span><br><span class="line">                    mv &#x3D; ha.handle(processedRequest, response, mappedHandler.getHandler());</span><br><span class="line">                    if (asyncManager.isConcurrentHandlingStarted()) &#123;</span><br><span class="line">                        return;</span><br><span class="line">                    &#125;</span><br><span class="line"></span><br><span class="line">                    this.applyDefaultViewName(processedRequest, mv);</span><br><span class="line">                    &#x2F;&#x2F;后置处理方法</span><br><span class="line">                    mappedHandler.applyPostHandle(processedRequest, response, mv);</span><br><span class="line">                &#125; catch (Exception e) &#123;</span><br><span class="line">                   ...</span><br><span class="line">                   &#125;</span><br><span class="line">                   &#x2F;&#x2F;会执行afterCompletion</span><br><span class="line">                   this.processDispatchResult(processedRequest, response, mappedHandler, mv, (Exception)dispatchException);</span><br><span class="line">                &#125; catch (Exception e) &#123;</span><br><span class="line">                  ...</span><br><span class="line">                  &#x2F;&#x2F;也会执行afterCompletion</span><br><span class="line">            &#125;</span><br><span class="line"></span><br><span class="line">        &#125; finally &#123;</span><br><span class="line">            ...</span><br><span class="line">       &#125;</span><br><span class="line">    &#125;</span><br></pre></td></tr></table></figure>

<p>从代码里可以看出Spring MVC对整个请求的处理流程为：<br>调用拦截器前置方法-&gt;调用请求处理方法-&gt;调用后置处理方法&gt;拦截器完成方法</p>
<p>调用拦截器的前置方法 正序</p>
<figure class="highlight plain"><table><tr><td class="code"><pre><span class="line">boolean applyPreHandle(HttpServletRequest request, HttpServletResponse response) throws Exception &#123;</span><br><span class="line">        HandlerInterceptor[] interceptors &#x3D; this.getInterceptors();</span><br><span class="line">        if (!ObjectUtils.isEmpty(interceptors)) &#123;</span><br><span class="line">            for(int i &#x3D; 0; i &lt; interceptors.length; this.interceptorIndex &#x3D; i++) &#123;</span><br><span class="line">                HandlerInterceptor interceptor &#x3D; interceptors[i];</span><br><span class="line">                if (!interceptor.preHandle(request, response, this.handler)) &#123;</span><br><span class="line">                    &#x2F;&#x2F;这里也会调用afterCompletion方法</span><br><span class="line">                    this.triggerAfterCompletion(request, response, (Exception)null);</span><br><span class="line">                    return false;</span><br><span class="line">                &#125;</span><br><span class="line">            &#125;</span><br><span class="line">        &#125;</span><br><span class="line"></span><br><span class="line">        return true;</span><br><span class="line">    &#125;</span><br></pre></td></tr></table></figure>

<p>后置方法：倒序</p>
<figure class="highlight plain"><table><tr><td class="code"><pre><span class="line">void applyPostHandle(HttpServletRequest request, HttpServletResponse response, @Nullable ModelAndView mv) throws Exception &#123;</span><br><span class="line">        HandlerInterceptor[] interceptors &#x3D; this.getInterceptors();</span><br><span class="line">        if (!ObjectUtils.isEmpty(interceptors)) &#123;</span><br><span class="line">            for(int i &#x3D; interceptors.length - 1; i &gt;&#x3D; 0; --i) &#123;</span><br><span class="line">                HandlerInterceptor interceptor &#x3D; interceptors[i];</span><br><span class="line">                interceptor.postHandle(request, response, this.handler, mv);</span><br><span class="line">            &#125;</span><br><span class="line">        &#125;</span><br><span class="line"></span><br><span class="line">    &#125;</span><br></pre></td></tr></table></figure>
<p>拦截器完成方法 倒序</p>
<figure class="highlight plain"><table><tr><td class="code"><pre><span class="line">void triggerAfterCompletion(HttpServletRequest request, HttpServletResponse response, @Nullable Exception ex) throws Exception &#123;</span><br><span class="line">        HandlerInterceptor[] interceptors &#x3D; this.getInterceptors();</span><br><span class="line">        if (!ObjectUtils.isEmpty(interceptors)) &#123;</span><br><span class="line">            for(int i &#x3D; this.interceptorIndex; i &gt;&#x3D; 0; --i) &#123;</span><br><span class="line">                HandlerInterceptor interceptor &#x3D; interceptors[i];</span><br><span class="line"></span><br><span class="line">                try &#123;</span><br><span class="line">                    interceptor.afterCompletion(request, response, this.handler, ex);</span><br><span class="line">                &#125; catch (Throwable var8) &#123;</span><br><span class="line">                    logger.error(&quot;HandlerInterceptor.afterCompletion threw exception&quot;, var8);</span><br><span class="line">                &#125;</span><br><span class="line">            &#125;</span><br><span class="line">        &#125;</span><br><span class="line"></span><br><span class="line">    &#125;</span><br></pre></td></tr></table></figure>

<p>由此可见，Interceptor 可对action进行拦截，在调用前，后和完成时实现我们的功能，同时提供了handle参数，可以对方法进行操作，相对Filter可操作性更强。</p>
<h2 id="Aop"><a href="#Aop" class="headerlink" title="Aop"></a>Aop</h2><p>Filter和Interceptor 是为了特定场景下更方便的使用，Aop的思想可以让我们实现拦截更加的灵活和方便。</p>
<h4 id="MethodInterceptor"><a href="#MethodInterceptor" class="headerlink" title="MethodInterceptor"></a>MethodInterceptor</h4><p>Spring中常用MethodInterceptor作为切面进行方法拦截。<br>MethodInterceptor是典型的动态代理模式</p>
<figure class="highlight plain"><table><tr><td class="code"><pre><span class="line">@FunctionalInterface</span><br><span class="line">public interface MethodInterceptor extends Interceptor &#123;</span><br><span class="line">    &#x2F;&#x2F;通过invocation.proceed()执行方法</span><br><span class="line">    Object invoke(MethodInvocation invocation) throws Throwable;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>
<p>实现接口后可以在xml或者Aspect来配置切点和切面。<br>这种方式可以对函数相关的比如请求参数等方便的进行操作。</p>
<h2 id="总结"><a href="#总结" class="headerlink" title="总结"></a>总结</h2><p>上面的过滤器或者拦截器，都能起到拦截的效果，也是为的更方便的实现拦截，但是他们拦截的目标不一样，实现机制也不同，所以适应的场景也就不同。</p>
<p>Filter不属于spring框架，用于请求的拦截，适合更加粗粒度的拦截。<br>Interceptor 对请求的拦截逻辑更加清晰简单，可操作的参数更多。<br>MethodInterceptor 利用Aop可以对普通的函数进行拦截，这时候Filter和Interceptor就无能为力了。</p>
<p>他们的执行时序为 filter优先于Interceptor优先于MethodInterceptor。</p>
]]></content>
      <categories>
        <category>web</category>
      </categories>
      <tags>
        <tag>spring</tag>
      </tags>
  </entry>
  <entry>
    <title>一种责任链模式的方法拦截器</title>
    <url>/2019/04/13/Easy-Filter-Chain/</url>
    <content><![CDATA[<h2 id="背景"><a href="#背景" class="headerlink" title="背景"></a>背景</h2><p>业务中当我们想调用一个方法时经常会做重重的校验，并且多个方法的校验很多时候是类似的，重复的代码和逻辑是我们不愿意看到的。我们希望的是可也根据业务抽象出一个个的拦截器，我在调用时可以随意的插拔这些拦截器。</p>
<a id="more"></a>
<h2 id="目标"><a href="#目标" class="headerlink" title="目标"></a>目标</h2><p>1.不侵入主要业务逻辑的情况下，为方法添加拦截器<br>2.拦截器是插拔便利的<br>3.拦截器的是有序的<br>4.过程可控：可以随时跳出</p>
<h2 id="思路"><a href="#思路" class="headerlink" title="思路"></a>思路</h2><p>第一条最简单的方法就是利用AOP来做，使用MethodInterceptor进行方法拦截；插拔方便可以利用注解；第3，4条可以设置一种链条式的拦截器开达到要求。</p>
<h2 id="实现"><a href="#实现" class="headerlink" title="实现"></a>实现</h2><h3 id="责任链"><a href="#责任链" class="headerlink" title="责任链"></a>责任链</h3><p>首先我们先来实现个责任链。<br>希望的过程：<br><img src="/2019/04/13/Easy-Filter-Chain/FilterChain.png" alt="责任链"></p>
<h4 id="拦截器-Filter"><a href="#拦截器-Filter" class="headerlink" title="拦截器 Filter"></a>拦截器 Filter</h4><p>首先定义一个接口，要做的事就是拦截：</p>
<figure class="highlight plain"><table><tr><td class="code"><pre><span class="line">public interface Filter &#123;</span><br><span class="line">    void check(FilterChain chain) throws Throwable;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>

<h4 id="链条-FilterChain"><a href="#链条-FilterChain" class="headerlink" title="链条 FilterChain"></a>链条 FilterChain</h4><p>作为一个链条，就是将所有的拦截器，按顺序串联起来。<br>首先我们采集所有的拦截器放到FilterParam中，传给Chain，并定义一个游标；<br>初始化一个Chain：</p>
<figure class="highlight plain"><table><tr><td class="code"><pre><span class="line">public FilterChain(FilterParam param) throws IllegalAccessException, InstantiationException &#123;</span><br><span class="line">        this.param &#x3D; param;</span><br><span class="line">        Map&lt;Class, DoFilter&gt; filterMap &#x3D; param.getFilters();</span><br><span class="line"></span><br><span class="line">        List&lt;Filter&gt; filters &#x3D; new ArrayList&lt;&gt;();</span><br><span class="line">        if(filterMap !&#x3D; null &amp;&amp; !filterMap.isEmpty())&#123;</span><br><span class="line"></span><br><span class="line">            for(Class clazz : filterMap.keySet())&#123;</span><br><span class="line">                Filter filter;</span><br><span class="line">                try &#123;</span><br><span class="line">                    filter &#x3D; (Filter) param.getApplicationContext().getBean(clazz);</span><br><span class="line">                &#125; catch (NoSuchBeanDefinitionException e) &#123;</span><br><span class="line">                    filter &#x3D; (Filter) clazz.newInstance();</span><br><span class="line">                &#125;</span><br><span class="line">                if(filter &#x3D;&#x3D; null) &#123;</span><br><span class="line">                    logger.info(&quot;not found filter&#x3D;&#123;&#125;&quot;, clazz.getSimpleName());</span><br><span class="line">                &#125; else &#123;</span><br><span class="line">                    filters.add(filter);</span><br><span class="line">                &#125;</span><br><span class="line"></span><br><span class="line">            &#125;</span><br><span class="line">        &#125;</span><br><span class="line">        iterator &#x3D; filters.iterator();</span><br><span class="line">    &#125;</span><br></pre></td></tr></table></figure>
<p>执行链条时，利用游标来控制，Guarder在guarder方法中会调用chain的guard()来移动游标：</p>
<figure class="highlight plain"><table><tr><td class="code"><pre><span class="line">public void doFilter() throws Throwable &#123;</span><br><span class="line">     Filter filter;</span><br><span class="line">     if(iterator!&#x3D;null &amp;&amp; iterator.hasNext() &amp;&amp; !param.isStop())&#123;</span><br><span class="line">         filter &#x3D; iterator.next();</span><br><span class="line">         logger.debug(&quot;&lt;FilterChain&gt; do next filter &#123;&#125;&quot;</span><br><span class="line">                 , filter.getClass().getSimpleName());</span><br><span class="line">         filter.check(this);</span><br><span class="line">     &#125; else &#123;</span><br><span class="line">         action();</span><br><span class="line">     &#125;</span><br><span class="line"> &#125;</span><br></pre></td></tr></table></figure>
<p>Filter内可以通过Stop标识随时停止filterChain。</p>
<p>最后通过GuarderChain的guarder方法,就可以调用所有的拦截器啦。<br>调用过程大概如下：<br><img src="/2019/04/13/Easy-Filter-Chain/work.png" alt="调用过程"><br>其中的action()方法 是个抽象方法，可以继承GuarderChain自己去实现逻辑，一般情况下action来执行Method的方法，方法的执行结果或者错误信息存在param里。<br>简单的实现一下：</p>
<figure class="highlight plain"><table><tr><td class="code"><pre><span class="line">@Override</span><br><span class="line">   public void action() throws Throwable &#123;</span><br><span class="line">       Object result;</span><br><span class="line">       if(null &#x3D;&#x3D; param.getMethodInvocation())&#123;</span><br><span class="line">           return;</span><br><span class="line">       &#125;</span><br><span class="line">       result &#x3D; param.getMethodInvocation().proceed();</span><br><span class="line">       param.setResult(result);</span><br><span class="line">   &#125;</span><br></pre></td></tr></table></figure>


<h3 id="MethodInterceptor"><a href="#MethodInterceptor" class="headerlink" title="MethodInterceptor"></a>MethodInterceptor</h3><p>然后就实现MethodInterceptor接口来实现方法的拦截：</p>
<figure class="highlight plain"><table><tr><td class="code"><pre><span class="line">public class MyMethodInterceptor implements MethodInterceptor &#123;</span><br><span class="line"></span><br><span class="line">    @Override</span><br><span class="line">    public Object invoke(MethodInvocation methodInvocation) throws Throwable &#123;</span><br><span class="line">        &#x2F;&#x2F; todo 做一些拦截</span><br><span class="line">       return methodInvocation.proceed();</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>

<p>为了插拔比较方便，可以采用注解的方式，定义注解为：</p>
<figure class="highlight plain"><table><tr><td class="code"><pre><span class="line">@Target(&#123; ElementType.METHOD &#125;)</span><br><span class="line">@Retention(RetentionPolicy.RUNTIME)</span><br><span class="line">@Repeatable(DoFilters.class)</span><br><span class="line">@Documented</span><br><span class="line">public @interface DoFilter &#123;</span><br><span class="line"></span><br><span class="line">    &#x2F;**</span><br><span class="line">     * 过滤器bean名称</span><br><span class="line">     *&#x2F;</span><br><span class="line">    Class filter();</span><br><span class="line"></span><br><span class="line">    &#x2F;**</span><br><span class="line">     * 参数翻译器</span><br><span class="line">     *&#x2F;</span><br><span class="line">    Class translator() default NoneMethodParamTranslator.class;</span><br><span class="line"></span><br><span class="line">    &#x2F;**</span><br><span class="line">     * 注解类型</span><br><span class="line">     *&#x2F;</span><br><span class="line">    int type() default 0;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>
<p>1.8之后支持多个相同注解， 所以我们可以在interceptor里面收集注解，添加到chain中。<br>实现一下interceptor：</p>
<figure class="highlight plain"><table><tr><td class="code"><pre><span class="line">public class MethodChainInterceptor implements MethodInterceptor, ApplicationContextAware &#123;</span><br><span class="line"></span><br><span class="line">    private static Logger logger &#x3D; LoggerFactory.getLogger(MethodChainInterceptor.class);</span><br><span class="line">    private ApplicationContext applicationContext;</span><br><span class="line">    </span><br><span class="line">    @Override</span><br><span class="line">    public Object invoke(MethodInvocation methodInvocation) throws Throwable &#123;</span><br><span class="line">        &#x2F;&#x2F;检查需要filter的方法</span><br><span class="line">        Method method &#x3D; methodInvocation.getMethod();</span><br><span class="line"></span><br><span class="line">        DoFilter[] methodChecks &#x3D; method.getAnnotationsByType(DoFilter.class);</span><br><span class="line">        if(methodChecks &#x3D;&#x3D; null || methodChecks.length &#x3D;&#x3D; 0)&#123;</span><br><span class="line">            return methodInvocation.proceed();</span><br><span class="line">        &#125;</span><br><span class="line">        &#x2F;&#x2F;收集filter</span><br><span class="line">        LinkedHashMap&lt;Class, DoFilter&gt; filterMap &#x3D; new LinkedHashMap&lt;&gt;(16);</span><br><span class="line">        Map&lt;Class, Class&gt; translators&#x3D; new HashMap&lt;&gt;(16);</span><br><span class="line"></span><br><span class="line">        for(DoFilter filter : methodChecks)&#123;</span><br><span class="line">            if(filter.type() &#x3D;&#x3D; 0) &#123;</span><br><span class="line">                filterMap.put(filter.filter(), filter);</span><br><span class="line">                translators.put(filter.filter(), filter.translator());</span><br><span class="line">            &#125;</span><br><span class="line">        &#125;</span><br><span class="line">        &#x2F;&#x2F;将收集的filter传给链条chain</span><br><span class="line">        MethodFilterParam param &#x3D; new MethodFilterParam();</span><br><span class="line">        param.setMethodInvocation(methodInvocation);</span><br><span class="line">        param.setFilters(filterMap);</span><br><span class="line">        param.setTranslators(translators);</span><br><span class="line">        param.setApplicationContext(applicationContext);</span><br><span class="line"></span><br><span class="line">        &#x2F;&#x2F;执行方法前执行</span><br><span class="line"></span><br><span class="line">        MethodFilterChain chain &#x3D; new MethodFilterChain(param);</span><br><span class="line">        logger.debug(&quot;startFilterChain&quot; );</span><br><span class="line">        chain.doFilter();</span><br><span class="line">        return param.getResult();</span><br><span class="line">    &#125;</span><br></pre></td></tr></table></figure>

<h3 id="需要的配置"><a href="#需要的配置" class="headerlink" title="需要的配置"></a>需要的配置</h3><p>依赖aop，需要的配置项目如下<br>    <figure class="highlight plain"><table><tr><td class="code"><pre><span class="line">  &lt;bean id&#x3D;&quot;methodInterceptor&quot; class&#x3D;&quot;com.breezyz.filter.interceptors.MethodChainInterceptor&quot;&#x2F;&gt;</span><br><span class="line">&lt;bean id&#x3D;&quot;requestInterceptor&quot; class&#x3D;&quot;com.breezyz.filter.interceptors.RequestInterceptor&quot;&#x2F;&gt;</span><br><span class="line">&lt;aop:config  proxy-target-class&#x3D;&quot;true&quot;&gt;</span><br><span class="line">    &lt;aop:pointcut id&#x3D;&quot;filterPointCut&quot; expression&#x3D; &quot;(@annotation(com.breezyz.filter.annotation.DoFilter) || (@annotation(com.breezyz.filter.annotation.DoFilters)))&quot;&#x2F;&gt;</span><br><span class="line">    &lt;aop:advisor advice-ref&#x3D;&quot;methodInterceptor&quot; pointcut-ref&#x3D;&quot;filterPointCut&quot;&#x2F;&gt;</span><br><span class="line">&lt;&#x2F;aop:config&gt;</span><br></pre></td></tr></table></figure></p>
<h3 id="举个例子"><a href="#举个例子" class="headerlink" title="举个例子"></a>举个例子</h3><p>举个打印日志的例子</p>
<h4 id="filter"><a href="#filter" class="headerlink" title="filter"></a>filter</h4><figure class="highlight plain"><table><tr><td class="code"><pre><span class="line">public class DefaultLogFilter implements Filter &#123;</span><br><span class="line">    private static Logger logger &#x3D; LoggerFactory.getLogger(DefaultLogFilter.class);</span><br><span class="line">    @Override</span><br><span class="line">    public void check(FilterChain chain) throws Throwable &#123;</span><br><span class="line">        FilterParam param &#x3D; chain.getParam();</span><br><span class="line">        Long startTime &#x3D; System.currentTimeMillis();</span><br><span class="line">        if(param !&#x3D; null)&#123;</span><br><span class="line">            logger.info(&quot;startDoMethod:&quot; + param.getFilterSign() + &quot;; start&#x3D;&quot; + startTime);</span><br><span class="line">        &#125;</span><br><span class="line">        chain.doFilter();</span><br><span class="line">        Long endTime &#x3D; System.currentTimeMillis();</span><br><span class="line">        if(param !&#x3D; null)&#123;</span><br><span class="line">            logger.info(&quot;endDoMethod:&quot; + param.getFilterSign() + &quot;; end&#x3D;&quot; + endTime + &quot;,用时:&quot; + (endTime - startTime));</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>
<h4 id="调用"><a href="#调用" class="headerlink" title="调用"></a>调用</h4><p>定义一个test方法，当testMethod调用时，责任链就会执行了。</p>
<figure class="highlight plain"><table><tr><td class="code"><pre><span class="line">@Service</span><br><span class="line">public class TestService &#123;</span><br><span class="line">    private static Logger logger &#x3D; LoggerFactory.getLogger(TestService.class);</span><br><span class="line">    @DoFilter(filter &#x3D; DefaultExceptionFilter.class)</span><br><span class="line">    @DoFilter(filter &#x3D; DefaultLogFilter.class)</span><br><span class="line">    public void test() throws Exception &#123;</span><br><span class="line">        logger.info(&quot;doTest&quot;);</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>
<p>到这就完成了一个方便插拔的责任链拦截器。</p>
<h2 id="未来"><a href="#未来" class="headerlink" title="未来"></a>未来</h2><h2 id="参考"><a href="#参考" class="headerlink" title="参考"></a>参考</h2>]]></content>
      <categories>
        <category>web</category>
      </categories>
      <tags>
        <tag>spring</tag>
      </tags>
  </entry>
  <entry>
    <title>Mongo增量更新</title>
    <url>/2017/08/14/Mongo-hide-update/</url>
    <content><![CDATA[<h2 id="问题描述："><a href="#问题描述：" class="headerlink" title="问题描述："></a>问题描述：</h2><p>在开发过程中，我们发现对某个类，在前端进行部分字段的编辑，那么在后端进行存储时需要将其它未变更字段重新存储或者在前端添加hidden字段，如果类字段太多就是费时费力了，并且很容易留下坑，造成数据损失。</p>
<h2 id="需求："><a href="#需求：" class="headerlink" title="需求："></a>需求：</h2><p>只对变更的字段进行存储修改。</p>
<a id="more"></a>

<h2 id="实现："><a href="#实现：" class="headerlink" title="实现："></a>实现：</h2><figure class="highlight bash"><table><tr><td class="code"><pre><span class="line">/**</span><br><span class="line"> * Mongo的增量更新;目前支持基本类型;以及Array;Set和List,类请继承BaseObject</span><br><span class="line"> * @Attention 只支持对原有数据的增加和修改,不支持删除;static 类型不更新; @JSONField(serialize=<span class="literal">false</span>)不更新</span><br><span class="line"> * @Attention 类结构中的基础类型需使用包装类型（int-&gt;Integer）</span><br><span class="line"> * @author  Nil</span><br><span class="line"> * @date 2017-7-22</span><br><span class="line"> */</span><br><span class="line">@Service</span><br><span class="line">public class MongoCommonService &#123;</span><br><span class="line"></span><br><span class="line">    @Autowired</span><br><span class="line">    private MongoTemplate mongoTemplate;</span><br><span class="line"></span><br><span class="line">    private static Logger logger = LoggerFactory.getLogger(MongoCommonService.class);</span><br><span class="line"></span><br><span class="line">    private Update doWithFields(final Object srcObject, final Update update, final String parentFieldName) &#123;</span><br><span class="line"></span><br><span class="line">        <span class="keyword">if</span>(srcObject == null) &#123;</span><br><span class="line">            <span class="built_in">return</span> update;</span><br><span class="line">        &#125;</span><br><span class="line">        Class srcClass = (Class)srcObject.getClass();</span><br><span class="line"></span><br><span class="line">        ReflectionUtils.doWithFields(srcClass, new ReflectionUtils.<span class="function"><span class="title">FieldCallback</span></span>() &#123;</span><br><span class="line">            @Override</span><br><span class="line">            public void doWith(Field field) throws IllegalArgumentException, IllegalAccessException &#123;</span><br><span class="line">                doWithField(srcObject, field, update, parentFieldName);</span><br><span class="line">            &#125;</span><br><span class="line">        &#125;);</span><br><span class="line">        <span class="built_in">return</span> update;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    private Update doWithField (Object object, Field field, Update update, String parentFieldName) throws IllegalAccessException &#123;</span><br><span class="line"></span><br><span class="line">        boolean access = field.isAccessible();</span><br><span class="line">        field.setAccessible(<span class="literal">true</span>);</span><br><span class="line"></span><br><span class="line">        Object var = field.get(object);</span><br><span class="line">        <span class="keyword">if</span>(var == null) &#123;</span><br><span class="line">            <span class="built_in">return</span> update;</span><br><span class="line">        &#125;</span><br><span class="line"></span><br><span class="line">        //static 不更新</span><br><span class="line">        <span class="keyword">if</span>(Modifier.isStatic(field.getModifiers()))&#123;</span><br><span class="line">            <span class="built_in">return</span> update;</span><br><span class="line">        &#125;</span><br><span class="line">        //JsonField.serialize = <span class="literal">false</span>不更新</span><br><span class="line">        <span class="keyword">if</span>(field.isAnnotationPresent(JSONField.class) &amp;&amp; !field.getAnnotation(JSONField.class).serialize())&#123;</span><br><span class="line">            <span class="built_in">return</span> update;</span><br><span class="line">        &#125;</span><br><span class="line"></span><br><span class="line">        Class&lt;?&gt; <span class="built_in">type</span> = field.getType();</span><br><span class="line">        String fieldName = field.getName();</span><br><span class="line">        String updateField = parentFieldName == null?fieldName:parentFieldName+<span class="string">"."</span>+fieldName;</span><br><span class="line">        <span class="keyword">if</span>(type.isPrimitive() || <span class="built_in">type</span> == String.class || <span class="built_in">type</span> == Long.class || <span class="built_in">type</span> == Integer.class || <span class="built_in">type</span> == Date.class) &#123;</span><br><span class="line">            //简单类型直接赋值</span><br><span class="line">            update.set(updateField, var);</span><br><span class="line">        &#125; <span class="keyword">else</span> <span class="keyword">if</span>(type.isArray()) &#123;</span><br><span class="line">            //数组只会更新和增加不会删除</span><br><span class="line">            int length = Array.getLength(var);</span><br><span class="line">            //对每个item进行处理</span><br><span class="line">            <span class="keyword">for</span> (int i = 0; i &lt; length; i++) &#123;</span><br><span class="line">                Object item = Array.get(var, i);</span><br><span class="line">                doWithFields(item, update, updateField + <span class="string">"."</span> +i);</span><br><span class="line">            &#125;</span><br><span class="line">        &#125; <span class="keyword">else</span> <span class="keyword">if</span>(List.class.isAssignableFrom(<span class="built_in">type</span>))&#123;</span><br><span class="line">            //对List操作</span><br><span class="line">            String methodKey = <span class="string">"get"</span> + fieldName.substring(0, 1).toUpperCase() + fieldName.substring(1);</span><br><span class="line">            Method m;</span><br><span class="line">            try &#123;</span><br><span class="line">                m = object.getClass().getMethod(methodKey);</span><br><span class="line">                List list = (List) m.invoke(object);</span><br><span class="line">                <span class="keyword">for</span>(int i = 0; i &lt; list.size(); i++) &#123;</span><br><span class="line">                    Object item = list.get(i);</span><br><span class="line">                    doWithFields(item,update, updateField + <span class="string">"."</span> +i);</span><br><span class="line">                &#125;</span><br><span class="line">            &#125; catch (InvocationTargetException | NoSuchMethodException e) &#123;</span><br><span class="line">                logger.error(<span class="string">"[ 更新结构失败]:List=&#123;&#125;,msg=&#123;&#125;"</span>, updateField, e.getMessage());</span><br><span class="line">            &#125;</span><br><span class="line">        &#125; <span class="keyword">else</span> <span class="keyword">if</span>(Set.class.isAssignableFrom(<span class="built_in">type</span>))&#123;</span><br><span class="line">            //对Set操作</span><br><span class="line">            String methodKey = <span class="string">"get"</span> + fieldName.substring(0, 1).toUpperCase() + fieldName.substring(1);</span><br><span class="line">            Method m;</span><br><span class="line">            try &#123;</span><br><span class="line">                m = object.getClass().getMethod(methodKey);</span><br><span class="line">                Set <span class="built_in">set</span> = (Set) m.invoke(object);</span><br><span class="line">                int index = 0;</span><br><span class="line">                <span class="keyword">while</span>(set.iterator().hasNext())&#123;</span><br><span class="line">                    Object item = set.iterator().next();</span><br><span class="line">                    doWithFields(item,update, updateField + <span class="string">"."</span> +index);</span><br><span class="line">                    index ++;</span><br><span class="line">                &#125;</span><br><span class="line">            &#125; catch (InvocationTargetException | NoSuchMethodException e) &#123;</span><br><span class="line">                logger.error(<span class="string">"[ 更新结构失败]:set=&#123;&#125;,msg=&#123;&#125;"</span>, updateField, e.getMessage());</span><br><span class="line">            &#125;</span><br><span class="line">        &#125; <span class="keyword">else</span> <span class="keyword">if</span> (BaseObject.class.isAssignableFrom(<span class="built_in">type</span>)) &#123;</span><br><span class="line">            //如果是类结构</span><br><span class="line">            doWithFields(var, update, updateField);</span><br><span class="line">        &#125;</span><br><span class="line">        field.setAccessible(access);</span><br><span class="line">        <span class="built_in">return</span> update;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    /**</span><br><span class="line">     * 只更新已经存在的</span><br><span class="line">     * @param query</span><br><span class="line">     * @param baseObj</span><br><span class="line">     * @param collection</span><br><span class="line">     */</span><br><span class="line"></span><br><span class="line">    public void dirtyUpdateFirst(Query query,Object baseObj, String collection)&#123;</span><br><span class="line">        Update update = new Update();</span><br><span class="line">        update = doWithFields(baseObj, update, null);</span><br><span class="line">        mongoTemplate.updateFirst(query,update, collection);</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    /**</span><br><span class="line">     * 更新;不存在会新建</span><br><span class="line">     * @param query</span><br><span class="line">     * @param baseObj</span><br><span class="line">     * @param collection</span><br><span class="line">     */</span><br><span class="line">    public void dirtyUpsert (Query query,Object baseObj, String collection)&#123;</span><br><span class="line">        Update update = new Update();</span><br><span class="line">        update = doWithFields(baseObj, update, null);</span><br><span class="line">        mongoTemplate.upsert(query,update, collection);</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>
<h2 id="参考："><a href="#参考：" class="headerlink" title="参考："></a>参考：</h2><p><a href="http://www.jianshu.com/p/dd7b5a0e2f64" target="_blank" rel="noopener">http://www.jianshu.com/p/dd7b5a0e2f64</a></p>
<h2 id="技术栈："><a href="#技术栈：" class="headerlink" title="技术栈："></a>技术栈：</h2><ul>
<li>反射机制</li>
<li>Mongo更新</li>
</ul>
]]></content>
      <categories>
        <category>web</category>
      </categories>
      <tags>
        <tag>Mongo</tag>
      </tags>
  </entry>
  <entry>
    <title>uploader（多文件上传）</title>
    <url>/2017/08/14/uploader/</url>
    <content><![CDATA[<h2 id="问题："><a href="#问题：" class="headerlink" title="问题："></a>问题：</h2><ul>
<li>做单文件上传时，发现重新添加后，input值不发生改变，导致不知道是否成功了，尤其是文件很小的时候，进度条基本看不出来；</li>
<li>查看源代码，发现dmuploader为多文件上传，所以会将文件名置“”也无可厚非；</li>
<li>修改源代码之后，可现实当前文件名称；</li>
<li>既然是多文件上传的源代码，索性加工一下，实现了一个多文件上传的工具  <a id="more"></a>
<h2 id="主要代码"><a href="#主要代码" class="headerlink" title="主要代码"></a>主要代码</h2></li>
</ul>
<figure class="highlight plain"><table><tr><td class="code"><pre><span class="line">&#x2F;**</span><br><span class="line"> * 多文件上传</span><br><span class="line"> * @author zhangbo[zhangbo1@huli.com]</span><br><span class="line"> * @since 2017-8-15</span><br><span class="line"> *&#x2F;</span><br><span class="line">(function($) &#123;</span><br><span class="line">    var pluginName &#x3D; &#39;mulUploader&#39;;</span><br><span class="line">    &#x2F;&#x2F; These are the plugin defaults values</span><br><span class="line">    var defaults &#x3D; &#123;</span><br><span class="line">        url: document.URL,</span><br><span class="line">        method: &#39;POST&#39;,</span><br><span class="line">        extraData: &#123;&#125;,</span><br><span class="line">        maxFileSize: 0,</span><br><span class="line">        maxFiles: 0,</span><br><span class="line">        allowedTypes: &#39;*&#39;,</span><br><span class="line">        extFilter: null,</span><br><span class="line">        dataType: null,</span><br><span class="line">        fileName: &#39;file&#39;,</span><br><span class="line">        onInit: function()&#123;&#125;,</span><br><span class="line">        onFallbackMode: function(message) &#123;&#125;,</span><br><span class="line">        onNewFile: function(id, file)&#123;&#125;,</span><br><span class="line">        onBeforeUpload: function(index)&#123;&#125;,</span><br><span class="line">        onComplete: function(file)&#123;&#125;,</span><br><span class="line">        onUploadProgress: function(index, percent)&#123;&#125;,</span><br><span class="line">        onUploadSuccess: function(index, data)&#123;&#125;,</span><br><span class="line">        onUploadError: function(index, message)&#123;&#125;,</span><br><span class="line">        onFileTypeError: function(file)&#123;&#125;,</span><br><span class="line">        onFileSizeError: function(file)&#123;&#125;,</span><br><span class="line">        onFileExtError: function(file)&#123;&#125;,</span><br><span class="line">        onFilesMaxError: function(file)&#123;&#125;</span><br><span class="line">    &#125;;</span><br><span class="line"></span><br><span class="line">    var MulUploader &#x3D; function(element, options)</span><br><span class="line">    &#123;</span><br><span class="line">        this.element &#x3D; $(element);</span><br><span class="line"></span><br><span class="line">        this.settings &#x3D; $.extend(&#123;&#125;, defaults, options);</span><br><span class="line"></span><br><span class="line">        if(!this.checkBrowser())&#123;</span><br><span class="line">            return false;</span><br><span class="line">        &#125;</span><br><span class="line"></span><br><span class="line">        this.init();</span><br><span class="line"></span><br><span class="line">        return true;</span><br><span class="line">    &#125;;</span><br><span class="line"></span><br><span class="line">    MulUploader.prototype.checkBrowser &#x3D; function()</span><br><span class="line">    &#123;</span><br><span class="line">        if(window.FormData &#x3D;&#x3D;&#x3D; undefined)&#123;</span><br><span class="line">            this.settings.onFallbackMode.call(this.element, &#39;Browser doesn\&#39;t support Form API&#39;);</span><br><span class="line"></span><br><span class="line">            return false;</span><br><span class="line">        &#125;</span><br><span class="line"></span><br><span class="line">        if(this.element.find(&#39;input[type&#x3D;file]&#39;).length &gt; 0)&#123;</span><br><span class="line">            return true;</span><br><span class="line">        &#125;</span><br><span class="line"></span><br><span class="line">        if (!this.checkEvent(&#39;drop&#39;, this.element) || !this.checkEvent(&#39;dragstart&#39;, this.element))&#123;</span><br><span class="line">            this.settings.onFallbackMode.call(this.element, &#39;Browser doesn\&#39;t support Ajax Drag and Drop&#39;);</span><br><span class="line"></span><br><span class="line">            return false;</span><br><span class="line">        &#125;</span><br><span class="line"></span><br><span class="line">        return true;</span><br><span class="line">    &#125;;</span><br><span class="line"></span><br><span class="line">    MulUploader.prototype.checkEvent &#x3D; function(eventName, element)</span><br><span class="line">    &#123;</span><br><span class="line">        var element &#x3D; element || document.createElement(&#39;div&#39;);</span><br><span class="line">        var eventName &#x3D; &#39;on&#39; + eventName;</span><br><span class="line"></span><br><span class="line">        var isSupported &#x3D; eventName in element;</span><br><span class="line"></span><br><span class="line">        if(!isSupported)&#123;</span><br><span class="line">            if(!element.setAttribute)&#123;</span><br><span class="line">                element &#x3D; document.createElement(&#39;div&#39;);</span><br><span class="line">            &#125;</span><br><span class="line">            if(element.setAttribute &amp;&amp; element.removeAttribute)&#123;</span><br><span class="line">                element.setAttribute(eventName, &#39;&#39;);</span><br><span class="line">                isSupported &#x3D; typeof element[eventName] &#x3D;&#x3D; &#39;function&#39;;</span><br><span class="line"></span><br><span class="line">                if(typeof element[eventName] !&#x3D; &#39;undefined&#39;)&#123;</span><br><span class="line">                    element[eventName] &#x3D; undefined;</span><br><span class="line">                &#125;</span><br><span class="line">                element.removeAttribute(eventName);</span><br><span class="line">            &#125;</span><br><span class="line">        &#125;</span><br><span class="line"></span><br><span class="line">        element &#x3D; null;</span><br><span class="line">        return isSupported;</span><br><span class="line">    &#125;;</span><br><span class="line"></span><br><span class="line">    MulUploader.prototype.init &#x3D; function()</span><br><span class="line">    &#123;</span><br><span class="line">        var widget &#x3D; this;</span><br><span class="line"></span><br><span class="line">        widget.queue &#x3D; new Array();</span><br><span class="line">        widget.queuePos &#x3D; -1;</span><br><span class="line">        widget.queueRunning &#x3D; false;</span><br><span class="line"></span><br><span class="line"></span><br><span class="line">        &#x2F;&#x2F; -- Drag and drop event</span><br><span class="line">        widget.element.on(&#39;drop&#39;, function (evt)&#123;</span><br><span class="line">            evt.preventDefault();</span><br><span class="line">            var files &#x3D; evt.originalEvent.dataTransfer.files;</span><br><span class="line">            widget.queueFiles(files);</span><br><span class="line">        &#125;);</span><br><span class="line"></span><br><span class="line"></span><br><span class="line">        &#x2F;&#x2F;-- Optional File input to make a clickable area</span><br><span class="line">        widget.element.find(&#39;input[type&#x3D;file]&#39;).on(&#39;change&#39;, function(evt)&#123;</span><br><span class="line">            var files &#x3D; evt.target.files;</span><br><span class="line">            widget.queueFiles(files);</span><br><span class="line">        &#125;);</span><br><span class="line"></span><br><span class="line">        this.settings.onInit.call(this.element);</span><br><span class="line">    &#125;;</span><br><span class="line"></span><br><span class="line">    MulUploader.prototype.queueFiles &#x3D; function(files)</span><br><span class="line">    &#123;</span><br><span class="line">        var j &#x3D; this.queue.length;</span><br><span class="line"></span><br><span class="line">        for (var i&#x3D; 0; i &lt; files.length; i++)</span><br><span class="line">        &#123;</span><br><span class="line">            var file &#x3D; files[i];</span><br><span class="line"></span><br><span class="line">            &#x2F;&#x2F; Check file size</span><br><span class="line">            if((this.settings.maxFileSize &gt; 0) &amp;&amp;</span><br><span class="line">                (file.size &gt; this.settings.maxFileSize))&#123;</span><br><span class="line"></span><br><span class="line">                this.settings.onFileSizeError.call(this.element, file);</span><br><span class="line"></span><br><span class="line">                continue;</span><br><span class="line">            &#125;</span><br><span class="line"></span><br><span class="line">            &#x2F;&#x2F; Check file type</span><br><span class="line">            if((this.settings.allowedTypes !&#x3D; &#39;*&#39;) &amp;&amp;</span><br><span class="line">                !file.type.match(this.settings.allowedTypes))&#123;</span><br><span class="line"></span><br><span class="line">                this.settings.onFileTypeError.call(this.element, file);</span><br><span class="line"></span><br><span class="line">                continue;</span><br><span class="line">            &#125;</span><br><span class="line"></span><br><span class="line">            &#x2F;&#x2F; Check file extension</span><br><span class="line">            if(this.settings.extFilter !&#x3D; null)&#123;</span><br><span class="line">                var extList &#x3D; this.settings.extFilter.toLowerCase().split(&#39;;&#39;);</span><br><span class="line"></span><br><span class="line">                var ext &#x3D; file.name.toLowerCase().split(&#39;.&#39;).pop();</span><br><span class="line"></span><br><span class="line">                if($.inArray(ext, extList) &lt; 0)&#123;</span><br><span class="line">                    this.settings.onFileExtError.call(this.element, file);</span><br><span class="line"></span><br><span class="line">                    continue;</span><br><span class="line">                &#125;</span><br><span class="line">            &#125;</span><br><span class="line"></span><br><span class="line">            &#x2F;&#x2F; Check max files</span><br><span class="line">            if(this.settings.maxFiles &gt; 0) &#123;</span><br><span class="line">                if(this.queue.length &gt;&#x3D; this.settings.maxFiles) &#123;</span><br><span class="line">                    this.settings.onFilesMaxError.call(this.element, file);</span><br><span class="line"></span><br><span class="line">                    continue;</span><br><span class="line">                &#125;</span><br><span class="line">            &#125;</span><br><span class="line"></span><br><span class="line">            this.queue.push(file);</span><br><span class="line"></span><br><span class="line">            var index &#x3D; this.queue.length - 1;</span><br><span class="line"></span><br><span class="line">            this.settings.onNewFile.call(this.element, index, file);</span><br><span class="line">        &#125;</span><br><span class="line"></span><br><span class="line">        &#x2F;&#x2F; Only start Queue if we haven&#39;t!</span><br><span class="line">        if(this.queueRunning)&#123;</span><br><span class="line">            return false;</span><br><span class="line">        &#125;</span><br><span class="line"></span><br><span class="line">        &#x2F;&#x2F; and only if new Failes were successfully added</span><br><span class="line">        if(this.queue.length &#x3D;&#x3D; j)&#123;</span><br><span class="line">            return false;</span><br><span class="line">        &#125;</span><br><span class="line"></span><br><span class="line">        this.processQueue();</span><br><span class="line"></span><br><span class="line">        return true;</span><br><span class="line">    &#125;;</span><br><span class="line"></span><br><span class="line">    MulUploader.prototype.processQueue &#x3D; function()</span><br><span class="line">    &#123;</span><br><span class="line">        var widget &#x3D; this;</span><br><span class="line"></span><br><span class="line">        widget.queuePos++;</span><br><span class="line"></span><br><span class="line">        if(widget.queuePos &gt;&#x3D; widget.queue.length)&#123;</span><br><span class="line">            &#x2F;&#x2F; Cleanup</span><br><span class="line"></span><br><span class="line">            widget.settings.onComplete.call(widget.element);</span><br><span class="line"></span><br><span class="line">            &#x2F;&#x2F; Wait until new files are droped</span><br><span class="line">            widget.queuePos &#x3D; (widget.queue.length - 1);</span><br><span class="line"></span><br><span class="line">            widget.queueRunning &#x3D; false;</span><br><span class="line"></span><br><span class="line">            return;</span><br><span class="line">        &#125;</span><br><span class="line"></span><br><span class="line">        var file &#x3D; widget.queue[widget.queuePos];</span><br><span class="line"></span><br><span class="line">        &#x2F;&#x2F; Form Data</span><br><span class="line">        var fd &#x3D; new FormData();</span><br><span class="line">        fd.append(widget.settings.fileName, file);</span><br><span class="line"></span><br><span class="line">        &#x2F;&#x2F; Return from client function (default &#x3D;&#x3D;&#x3D; undefined)</span><br><span class="line">        var can_continue &#x3D; widget.settings.onBeforeUpload.call(widget.element, widget.queuePos);</span><br><span class="line"></span><br><span class="line">        &#x2F;&#x2F; If the client function doesn&#39;t return FALSE then continue</span><br><span class="line">        if( false &#x3D;&#x3D;&#x3D; can_continue ) &#123;</span><br><span class="line">            return;</span><br><span class="line">        &#125;</span><br><span class="line"></span><br><span class="line">        &#x2F;&#x2F; Append extra Form Data</span><br><span class="line">        $.each(widget.settings.extraData, function(exKey, exVal)&#123;</span><br><span class="line">            fd.append(exKey, exVal);</span><br><span class="line">        &#125;);</span><br><span class="line"></span><br><span class="line">        widget.queueRunning &#x3D; true;</span><br><span class="line"></span><br><span class="line">        &#x2F;&#x2F; Ajax Submit</span><br><span class="line">        $.ajax(&#123;</span><br><span class="line">          url: widget.settings.url,</span><br><span class="line">          type: widget.settings.method,</span><br><span class="line">          dataType: widget.settings.dataType,</span><br><span class="line">          data: fd,</span><br><span class="line">          cache: false,</span><br><span class="line">          contentType: false,</span><br><span class="line">          processData: false,</span><br><span class="line">          forceSync: false,</span><br><span class="line">          xhr: function()&#123;</span><br><span class="line">            var xhrobj &#x3D; $.ajaxSettings.xhr();</span><br><span class="line">            if(xhrobj.upload)&#123;</span><br><span class="line">              xhrobj.upload.addEventListener(&#39;progress&#39;, function(event) &#123;</span><br><span class="line">                var percent &#x3D; 0;</span><br><span class="line">                var position &#x3D; event.loaded || event.position;</span><br><span class="line">                var total &#x3D; event.total || event.totalSize;</span><br><span class="line">                if(event.lengthComputable)&#123;</span><br><span class="line">                  percent &#x3D; Math.ceil(position &#x2F; total * 100);</span><br><span class="line">                &#125;</span><br><span class="line">        </span><br><span class="line">                widget.settings.onUploadProgress.call(widget.element, widget.queuePos, percent);</span><br><span class="line">              &#125;, false);</span><br><span class="line">            &#125;</span><br><span class="line">        </span><br><span class="line">            return xhrobj;</span><br><span class="line">          &#125;,</span><br><span class="line">          success: function (data, message, xhr)&#123;</span><br><span class="line">            widget.settings.onUploadSuccess.call(widget.element, widget.queuePos, data);</span><br><span class="line">          &#125;,</span><br><span class="line">          error: function (xhr, status, errMsg)&#123;</span><br><span class="line">            widget.settings.onUploadError.call(widget.element, widget.queuePos, errMsg);</span><br><span class="line">          &#125;,</span><br><span class="line">          complete: function(xhr, textStatus)&#123;</span><br><span class="line">            widget.processQueue();</span><br><span class="line">          &#125;</span><br><span class="line">        &#125;);</span><br><span class="line">       &#x2F;&#x2F; widget.settings.onUploadSuccess.call(widget.element, widget.queuePos, null);</span><br><span class="line">        widget.processQueue();</span><br><span class="line">    &#125;;</span><br><span class="line"></span><br><span class="line">    $.fn.mulUploader &#x3D; function(options)&#123;</span><br><span class="line">        return this.each(function()&#123;</span><br><span class="line">            if(!$.data(this, pluginName))&#123;</span><br><span class="line">                $.data(this, pluginName, new MulUploader(this, options));</span><br><span class="line">            &#125;</span><br><span class="line">        &#125;);</span><br><span class="line">    &#125;;</span><br><span class="line"></span><br><span class="line">    &#x2F;&#x2F; -- Disable Document D&amp;D events to prevent opening the file on browser when we drop them</span><br><span class="line">    $(document).on(&#39;dragenter&#39;, function (e) &#123; e.stopPropagation(); e.preventDefault(); &#125;);</span><br><span class="line">    $(document).on(&#39;dragover&#39;, function (e) &#123; e.stopPropagation(); e.preventDefault(); &#125;);</span><br><span class="line">    $(document).on(&#39;drop&#39;, function (e) &#123; e.stopPropagation(); e.preventDefault(); &#125;);</span><br><span class="line">&#125;)(jQuery);</span><br></pre></td></tr></table></figure>
<pre><code>+ 使用
+ 页面元素</code></pre><figure class="highlight"><table><tr><td class="code"><pre><span class="line">&lt;div <span class="class"><span class="keyword">class</span></span>=<span class="string">"form-group"</span>&gt;</span><br><span class="line">    &lt;label for="insCommitDoc" class="col-sm-4 control-label"&gt;上传文件：&lt;/label&gt;</span><br><span class="line">    &lt;div <span class="class"><span class="keyword">class</span></span>=<span class="string">"col-sm-8"</span> id=<span class="string">"drag-and-drop-zone"</span>&gt;</span><br><span class="line">        &lt;input type=<span class="string">"file"</span> id=<span class="string">"insCommitDoc"</span>  multiple=<span class="string">"multiple"</span> name=<span class="string">"insCommitDoc"</span>/&gt;</span><br><span class="line">        &lt;div <span class="class"><span class="keyword">class</span></span>=<span class="string">"col-sm-8"</span>&gt;</span><br><span class="line">            &lt;p id=<span class="string">"uploadErrMsg"</span> <span class="class"><span class="keyword">class</span></span>=<span class="string">"bg-danger"</span>&gt;</span><br><span class="line">            &lt;/p&gt;</span><br><span class="line">        &lt;/div&gt;</span><br><span class="line">    &lt;/div&gt;</span><br><span class="line">&lt;/div&gt;</span><br></pre></td></tr></table></figure>
<pre><code>+ js绑定</code></pre><pre><code class="js"><span class="comment">/**</span>
<span class="comment"> * 多文件上传:支持Drop;多选;</span>
<span class="comment"> */</span>
<span class="keyword">var</span> id = <span class="number">-1</span>;
$(<span class="string">'#drag-and-drop-zone'</span>).mulUploader({
    url: <span class="string">'./upload'</span>,
    dataType: <span class="string">'json'</span>,
    fileName: <span class="string">'sfiles'</span>,
    allowedTypes: <span class="string">'*'</span>,
    extraData: {
        source: <span class="number">1001</span>,
        token: <span class="number">123</span>
    },
    maxFiles : <span class="number">5</span>,
    onInit:<span class="function"><span class="keyword">function</span>(<span class="params"></span>) </span>{
        <span class="comment">//添加显示文件进度的DIV</span>
        $(<span class="keyword">this</span>).append(<span class="string">"&lt;div id='fileDiv' class='col-sm-8' style='max-height:300px;overflow-y: auto; margin-top: 10px;'&gt;&lt;/div&gt;"</span>)
        id ++;
    },
    onUploadProgress: <span class="function"><span class="keyword">function</span> (<span class="params">index, percent</span>) </span>{
        $(<span class="string">"#"</span>+index+<span class="string">"_progress"</span> +<span class="string">" .progress-bar"</span>).css(
            <span class="string">'width'</span>,
            percent + <span class="string">'%'</span>
        );
    },
    onUploadSuccess: <span class="function"><span class="keyword">function</span> (<span class="params">index, data</span>) </span>{
        $.each(data, <span class="function"><span class="keyword">function</span> (<span class="params">index, file</span>) </span>{
            <span class="keyword">if</span> (file.statusCode == <span class="number">200</span>) {
                $(<span class="string">"#"</span> + id+<span class="string">"."</span>+index).val(file.postfix);
                $(<span class="string">"#"</span> + index +<span class="string">"_progress"</span> + <span class="string">" .progress-bar"</span>).css(
                    <span class="string">'width'</span>, <span class="string">'100%'</span>
                ).html(<span class="string">"上传完成"</span>);
            } <span class="keyword">else</span> {
                <span class="built_in">console</span>.log(<span class="string">"statusCode:"</span> + file.statusCode);
                $(<span class="string">"#uploadErrMsg"</span>).html(<span class="string">"statusCode:"</span> + file.statusCode+<span class="string">" msg:"</span>+file.errMsg);
            }
        });
    },
    onUploadError: <span class="function"><span class="keyword">function</span> (<span class="params">id, message</span>) </span>{
        $(<span class="string">"#uploadErrMsg"</span>).html(message);
    },
    onFileTypeError: <span class="function"><span class="keyword">function</span> (<span class="params">file</span>) </span>{
        $(<span class="string">"#uploadErrMsg"</span>).html(file.name + <span class="string">"cannot be added: must be an image"</span>);
    },
    onFileSizeError: <span class="function"><span class="keyword">function</span> (<span class="params">file</span>) </span>{
        $(<span class="string">"#uploadErrMsg"</span>).html(file.name + <span class="string">"cannot be added: size excess limit"</span>);
    },
    onFallbackMode: <span class="function"><span class="keyword">function</span> (<span class="params">message</span>) </span>{
        $(<span class="string">"#uploadErrMsg"</span>).html(<span class="string">"Browser not supported(do something else here!): "</span>);
    },
    onFileExtError: <span class="function"><span class="keyword">function</span>(<span class="params">file</span>)</span>{
        $(<span class="string">"#uploadErrMsg"</span>).html(file.name + <span class="string">"cannot be added: extension excess error!"</span>);
    },
    onFilesMaxError: <span class="function"><span class="keyword">function</span>(<span class="params">file</span>)</span>{
        $(<span class="string">"#uploadErrMsg"</span>).html(file.name + <span class="string">"cannot be added: num excess limit!"</span>);
    },
    onNewFile: <span class="function"><span class="keyword">function</span> (<span class="params">index, file</span>) </span>{
        <span class="comment">//新添加file</span>
        $(<span class="string">"#fileDiv"</span>).append(<span class="string">"&lt;div class='col-sm-8'&gt;"</span> +
                <span class="string">"&lt;input type='text' value="</span> +file.name + <span class="string">"&gt;"</span> +
                <span class="string">"&lt;input type='hidden' id="</span>+id+<span class="string">"."</span>+index +<span class="string">" name="</span>+ id+<span class="string">"."</span>+index+<span class="string">".name"</span>+<span class="string">" value=''/&gt;"</span> +
                <span class="string">"&lt;div id="</span>+index+<span class="string">"_progress"</span> + <span class="string">" class='progress'&gt;"</span> +
                    <span class="string">" &lt;div class='progress-bar progress-bar-success progress-bar-striped' role='progressbar' style='width: 0%;'&gt;"</span>+
                    <span class="string">"&lt;/div&gt;"</span> +
                <span class="string">"&lt;/div&gt;"</span> +
            <span class="string">"&lt;/div&gt;"</span>
        );
    }
});</code></pre>
]]></content>
      <categories>
        <category>FE</category>
      </categories>
      <tags>
        <tag>js</tag>
      </tags>
  </entry>
  <entry>
    <title>基于视觉的车辆变道危险判断和预警系统</title>
    <url>/2017/01/01/Vision-Based-Risk-Judge-and-Early-Warning-for-Lane-Changing/</url>
    <content><![CDATA[<h3 id="背景"><a href="#背景" class="headerlink" title="背景"></a>背景</h3><h4 id="问题描述："><a href="#问题描述：" class="headerlink" title="问题描述："></a>问题描述：</h4><p>一个很实际的问题，在开车时变道经常发生，我们首先先观察相邻车道是否满足变道要求，如果满足那么变道，但是往往是听到后面按喇叭，紧接着可能再骂两句，可是我的确没看到后方有车呀。</p>
<p>汽车的后方视野如图来表示：<br><img src="/2017/01/01/Vision-Based-Risk-Judge-and-Early-Warning-for-Lane-Changing/1.png" alt="汽车的后方视野"></p>
<blockquote>
<p>○1-○3：右后视镜可见区域；<br>  ○2-○4：B柱挡住的视野；<br>  ○3-○4：不可见区域即为盲点。</p>
</blockquote>
<p>很明显的后视镜的视野范围是有限的，加之a、b柱的存在造成的视野盲区是很大的，必然会影响驾驶员的判断。<br>可见盲区问题是影响变道安全的一个重要原因。</p>
<a id="more"></a>
<h4 id="目前的解决方法："><a href="#目前的解决方法：" class="headerlink" title="目前的解决方法："></a>目前的解决方法：</h4><ul>
<li>加广角后视镜<br>也就是在后视镜上添加一个凸透镜来增大视野范围，增加视野是有限的。</li>
<li>雷达装置<br>不直观，探测距离短，造价高。</li>
<li>通过一些辅助设备，如行车记录仪<br>目前市面上的行车记录仪，可以通过摄像头将画面呈现给驾驶员。<br>但是图像有畸变；屏幕尺寸不够大。这两点都会增加驾驶员的负担。</li>
</ul>
<h4 id="小结："><a href="#小结：" class="headerlink" title="小结："></a>小结：</h4><p>由于盲区的存在，变道会存在一定的风险，目前的解决方法不足以解决。我希望的是一个在变道的时候，告诉我后方是否安全，并将危险展示给我的一个东西。</p>
<hr>
<h3 id="设计"><a href="#设计" class="headerlink" title="设计"></a>设计</h3><p>根据需要我们要解决两个方面的问题：盲区视野和智能提醒。</p>
<h4 id="盲区视野："><a href="#盲区视野：" class="headerlink" title="盲区视野："></a>盲区视野：</h4><ul>
<li>采集<br>直接显示给司机车辆变道时需要的视野是最直接也最好的，所以利用相机是个不错的选择。<br>优点：范围大、造价低，直观。</li>
<li>可视化<br>需要将相机采集的数据显示出来，如果可以和一些车载设备例如导航设备、行车记录仪等这些自带显示器的设备结合会是不错的选择，但是目前车载设备没有这方面的接口。<br>没办法，只好利用一台手机来显示。</li>
</ul>
<h4 id="智能提醒："><a href="#智能提醒：" class="headerlink" title="智能提醒："></a>智能提醒：</h4><p>能够提醒危险首要需要的是能够判断危险。</p>
<ul>
<li><p>危险判断<br>要求：准确、稳定、及时。<br>模型：TTC（Time To Collision）（最常用）。<br>数据：TTC模型需要相对车速、车距信息，现在有的数据只是后方的图像，所以智能从图像中提取需要的信息。</p>
<blockquote>
<h6 id="问题来了，如何从图像中提取需要的车辆信息？"><a href="#问题来了，如何从图像中提取需要的车辆信息？" class="headerlink" title="问题来了，如何从图像中提取需要的车辆信息？"></a>问题来了，如何从图像中提取需要的车辆信息？</h6><p>需要的技术：车辆检测、跟踪；GPS测速；单目测距。<br>实际道路环境是复杂的，行驶中的车辆有以下特征：车辆会相互遮挡；车辆之间颜色、形状等特征相似；光照变化；比较短的相邻时刻，位置和形状变化不大。<br>根据以上特征，可以选择合适的方法。</p>
</blockquote>
<ul>
<li>车辆检测<br>  方法：利用基于机器学习的检测方法。分类器：Adaboost，特征：Haar-like。<br>  结果：可以得到车辆在图像内的矩形位置。</li>
<li>车辆跟踪<br>  方法：区域匹配和卡尔曼滤波的跟踪（利用车辆质心位置和形状作为匹配元素，利用预测值与观测值做匹配）<br>  结果：可以在时域上关联车辆。</li>
<li>测距<br>  方法：单目测距，利用小孔成像原理进行坐标转换。<br>  结果：获得车辆世界坐标，然后计算车距。</li>
<li>测速<br>  方法： GPS测速（用google map 提供的经纬度转换距离公式，获得距离进而得到速度）。<br>  结果：获得本车车速，根据车距获得相对速度进而获得后车速度。</li>
</ul>
<blockquote>
<p>到此,危险判断模型需要的数据就有啦。</p>
</blockquote>
</li>
<li><p>危险的反馈<br>一般的提醒方式有三种：声音、接触（震动）、图像。<br>既然使用手机作为可视化设备，以上三种可以同时实现，足够提醒司机了。</p>
</li>
</ul>
<p>总体设计思维导图如图2：<br><img src="/2017/01/01/Vision-Based-Risk-Judge-and-Early-Warning-for-Lane-Changing/2.png" alt="分析图"><br>系统设计如图3：<br><img src="/2017/01/01/Vision-Based-Risk-Judge-and-Early-Warning-for-Lane-Changing/3.png" alt="模块图"></p>
<hr>
<h3 id="实现"><a href="#实现" class="headerlink" title="实现"></a>实现</h3><p>我是比较看好Android在车载领域的应用前景的，所以为了以后和车载设备对接，在Android平台实现了系统。<br>设备要求：一台Android手机，运行速度不要太慢吧（本人手机MI4）。<br>开发语言：Java + Python<br>开发工具：AndroidStudio，OpenCV</p>
<p>实现类图如下图所示：<br><img src="/2017/01/01/Vision-Based-Risk-Judge-and-Early-Warning-for-Lane-Changing/4.png" alt="类图"></p>
<p>实现结果：<br><img src="/2017/01/01/Vision-Based-Risk-Judge-and-Early-Warning-for-Lane-Changing/5.png" alt="系统实现"></p>
<hr>
<h3 id="验证"><a href="#验证" class="headerlink" title="验证"></a>验证</h3><p>由于实验环境的限制和出于安全的考虑，利用在实际驾驶过程中随机拍摄的视频来验证系统的可行性。</p>
<h4 id="实验设计"><a href="#实验设计" class="headerlink" title="实验设计"></a>实验设计</h4><p>验证可行性主要从以下方面验证：</p>
<ul>
<li>及时性<br>系统可否及时的给出结果</li>
<li>准确性<br>数据误差是否会影响危险判断结果</li>
<li>稳定性<br>长久运行，是否会造成性能的下降和错误的累积</li>
</ul>
<h4 id="实验结果"><a href="#实验结果" class="headerlink" title="实验结果"></a>实验结果</h4><h5 id="及时性验证"><a href="#及时性验证" class="headerlink" title="及时性验证"></a>及时性验证</h5><p>从图像录入到系统返回结果的用时统计如下图，图像分辨率为630*320，一帧大概用时300ms。<br><img src="/2017/01/01/Vision-Based-Risk-Judge-and-Early-Warning-for-Lane-Changing/6.png" alt="正确率统计"></p>
<blockquote>
<p>300ms，车辆相对位移不会超过1m，在这么短的距离内，驾驶员肯定能够看到后车。</p>
</blockquote>
<h5 id="准确性验证"><a href="#准确性验证" class="headerlink" title="准确性验证"></a>准确性验证</h5><ul>
<li><p>检测、跟踪准确率<br>定义一个序列中车辆检测的准确率为:Precision=(TP - FP)/N</p>
<p>TP(True Positive) 表示正确检测为车辆的帧数。FP（False Positive）表示存在将非车辆区域检测为车辆区域的帧数。N为序列的总帧数。<br>统计结果：<br><img src="/2017/01/01/Vision-Based-Risk-Judge-and-Early-Warning-for-Lane-Changing/7.png" alt="正确率统计"></p>
<blockquote>
<p>加入跟踪后可以提高准确率，如果对遮挡，摄像机摆动等进行处理，准确率还可以提高。</p>
</blockquote>
</li>
<li><p>测距误差<br>定义距离测量误差为:deviation =  (|CD-TD|)/TD<br>CD(Calculated Distance)为计算距离。TD(True Distance)为真实距离.<br>统计结果：<br><img src="/2017/01/01/Vision-Based-Risk-Judge-and-Early-Warning-for-Lane-Changing/8.png" alt="测距误差"></p>
<blockquote>
<p>测距误差在1.5%以内。</p>
</blockquote>
</li>
<li><p>测速误差<br>在实际驾驶中，车速很难保持稳定不变，所以我们对实际行驶140秒时间的速度变化进行了记录。每秒获得一次计算速度；每10秒记录一次实际速度。<br>统计结果：<br><img src="/2017/01/01/Vision-Based-Risk-Judge-and-Early-Warning-for-Lane-Changing/9.png" alt="测速误差"></p>
<blockquote>
<p>计算结果可以表征速度的变化趋势，车速在稳定状况下，误差在0.5m/s上下波动。危险模型与相对速度有关，测量速度为更好的变现状况，所以误差满足。</p>
</blockquote>
</li>
<li><p>执行一次造成的误差<br>统计数据表明车辆完成平稳安全的加速换道过程用时一般在3~5秒；<br>根据经验，相对车速一般在3m/s以内；安全距离（车辆变道成功后，与后车保持的距离）一般取5米；所以危险检测距离取20米即可。<br>假设t时刻车距为a，t+1时刻车距为b，那么误差距离最大为c= a×1.5%+b×1.5%。处理时间为300ms，则一次计算时间内相对位移为0.9m左右，所以取 a= b+1，<br>则c= 0.03a + 0.015。a最大为20，所以最大误差在1米以内。<br>而建立的危险模型中，两车要求保持5m范围之内，所以在1m的测量误差内可以保证安全。</p>
</li>
</ul>
<h5 id="稳定性"><a href="#稳定性" class="headerlink" title="稳定性"></a>稳定性</h5><p>  1、检测为每次检测，距离为每次测量，所以不受上一帧图像影响；<br>  2、跟踪采用Kalman滤波获得，所以与之前的每一帧有关，但是也得益于Kalman算法，跟踪可以对检测结构进行校正</p>
<ul>
<li><p>跟踪的结果校正<br>过程如图所示：<br><img src="/2017/01/01/Vision-Based-Risk-Judge-and-Early-Warning-for-Lane-Changing/12.png" alt="结果校正过程"></p>
<p>只是检测：<br><img src="/2017/01/01/Vision-Based-Risk-Judge-and-Early-Warning-for-Lane-Changing/10.png" alt="测速误差"><br>加入跟踪：<br><img src="/2017/01/01/Vision-Based-Risk-Judge-and-Early-Warning-for-Lane-Changing/11.png" alt="测速误差"></p>
<blockquote>
<p>经过三次检测就可以排除错检车辆，同理也会重新添加漏检车辆。所以这种跟踪机制，增加了系统的健壮性。</p>
</blockquote>
</li>
</ul>
<h5 id="结论：实验结果表明，本系统可以及时有效的识别危险。"><a href="#结论：实验结果表明，本系统可以及时有效的识别危险。" class="headerlink" title="结论：实验结果表明，本系统可以及时有效的识别危险。"></a>结论：实验结果表明，本系统可以及时有效的识别危险。</h5>]]></content>
  </entry>
  <entry>
    <title>Hello World</title>
    <url>/2016/01/01/hello-world/</url>
    <content><![CDATA[<p>Welcome to <a href="https://hexo.io/" target="_blank" rel="noopener">Hexo</a>! This is your very first post. Check <a href="https://hexo.io/docs/" target="_blank" rel="noopener">documentation</a> for more info. If you get any problems when using Hexo, you can find the answer in <a href="https://hexo.io/docs/troubleshooting.html" target="_blank" rel="noopener">troubleshooting</a> or you can ask me on <a href="https://github.com/hexojs/hexo/issues" target="_blank" rel="noopener">GitHub</a>.</p>
<a id="more"></a>

<h2 id="Quick-Start"><a href="#Quick-Start" class="headerlink" title="Quick Start"></a>Quick Start</h2><h3 id="Create-a-new-post"><a href="#Create-a-new-post" class="headerlink" title="Create a new post"></a>Create a new post</h3><figure class="highlight bash"><table><tr><td class="code"><pre><span class="line">$ hexo new <span class="string">"My New Post"</span></span><br></pre></td></tr></table></figure>

<p>More info: <a href="https://hexo.io/docs/writing.html" target="_blank" rel="noopener">Writing</a></p>
<h3 id="Run-server"><a href="#Run-server" class="headerlink" title="Run server"></a>Run server</h3><figure class="highlight bash"><table><tr><td class="code"><pre><span class="line">$ hexo server</span><br></pre></td></tr></table></figure>

<p>More info: <a href="https://hexo.io/docs/server.html" target="_blank" rel="noopener">Server</a></p>
<h3 id="Generate-static-files"><a href="#Generate-static-files" class="headerlink" title="Generate static files"></a>Generate static files</h3><figure class="highlight bash"><table><tr><td class="code"><pre><span class="line">$ hexo generate</span><br></pre></td></tr></table></figure>

<p>More info: <a href="https://hexo.io/docs/generating.html" target="_blank" rel="noopener">Generating</a></p>
<h3 id="Deploy-to-remote-sites"><a href="#Deploy-to-remote-sites" class="headerlink" title="Deploy to remote sites"></a>Deploy to remote sites</h3><figure class="highlight bash"><table><tr><td class="code"><pre><span class="line">$ hexo deploy</span><br></pre></td></tr></table></figure>

<p>More info: <a href="https://hexo.io/docs/one-command-deployment.html" target="_blank" rel="noopener">Deployment</a></p>
]]></content>
      <categories>
        <category>hexo</category>
      </categories>
  </entry>
</search>
